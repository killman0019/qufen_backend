<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd"
	default-lazy-init="true">

	<util:properties id="props"
		location="file:/opt/resource/system.properties" />
	<bean id="configProfile"
		class="com.dangdang.config.service.zookeeper.ZookeeperConfigProfile">
		<constructor-arg name="connectStr" value="#{props['zookeeper.hosts']}" />
		<constructor-arg name="rootNode" value="#{props['rootNode']}" />
		<constructor-arg name="version" value="#{props['version']}" />
	</bean>
	<bean id="dbConfig"
		class="com.dangdang.config.service.zookeeper.ZookeeperConfigGroup"
		c:configProfile-ref="configProfile" c:node="db" />

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="false" />
		<!-- 参数化SQL(多个语句相同,参数不同)合并 -->
		<property name="mergeSql" value="true" />
	</bean>
	<!-- WallFilter基于SQL语义分析来实现防御SQL注入攻击. 把logViolation设置为true，而throwException设置为false。就可以观察是否存在违规的情况，同时不影响业务运行。 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<!-- 对被认为是攻击的SQL进行LOG.error输出 -->
		<property name="logViolation" value="true" />
		<!-- 对被认为是攻击的SQL抛出SQLExcepton -->
		<property name="throwException" value="false" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="resultSetLogEnabled" value="false" />
		<!-- 输出可执行的SQL log4j里设置log4j.logger.druid.sql.Statement=DEBUG,生产环境设置为false,log级别设置为ERROR -->
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="connectionConnectAfterLogEnabled" value="false"/>
		<property name="statementLogEnabled" value="false"/>
		<property name="statementCloseAfterLogEnabled" value="false"/>
		<property name="statementParameterSetLogEnabled" value="false"/>
		<property name="statementPrepareAfterLogEnabled" value="false"/>
		<property name="statementExecuteAfterLogEnabled" value="false" />
		<property name="resultSetCloseAfterLogEnabled" value="false"/>
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="#{dbConfig['jdbc.driver']}" />
		<property name="url" value="#{dbConfig['jdbc.url']}" />
		<property name="username" value="#{dbConfig['jdbc.username']}" />
		<property name="password" value="#{dbConfig['jdbc.password']}" />
	    <!-- 连接池最大使用连接数 -->
		<property name="maxActive" value="300" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="10" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="10" />
		<!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 清除无用连接的等待时间1800秒，也就是30分钟.关闭长时间不使用的连接 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" /> 	
		<!-- 连接属性 -->
		<property name="connectionProperties" value="clientEncoding=UTF-8" />
		<!-- 用于统计监控信息 ,StatFilter的几种配置方式: 1、proxyFilters属性自定义 2、StatFilter简化配置方式，通过filters属性value="mergeStat" 
			3、可以通过connectProperties属性来打开mergeSql功能druid.stat.mergeSql=true 4、通过JVM参数:-Ddruid.stat.mergeSql=true -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
				<ref bean="log-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/tzg/entitys/**/*.xml" />
	</bean>

	<!-- 自动扫描mapper配置和dao映射，无需写mybatis-config.xml -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tzg.entitys" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>

	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
 
</beans>